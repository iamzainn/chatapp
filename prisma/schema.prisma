generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @unique
  email        String    @unique
  firstName    String
  lastName     String
  profileImage String
  isActive     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  chats        UserChat[]
  messages     Message[]
  groups       GroupUser[]

  Group Group[]
}

model Chat {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isGroupChat   Boolean     @default(false)
  users         UserChat[]
  messages      Message[]   
  groupId       Int?        
  group         Group?      @relation(fields: [groupId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId  String
  type      MessageType
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id]) // Specifies the relation details here

  Group Group[]
}

 model UserChat {
  userId String
  chatId Int
  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])
  @@id([userId, chatId])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       GroupUser[]
  chats       Chat[]        // Chats related to the group
  messages    Message[]     // Messages related to the group (messages must belong to a chat)

  
  groupAdminId String?
  groupAdmin   User?        @relation(fields: [groupAdminId], references: [id])
}

model GroupUser {
  userId  String
  groupId Int

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

enum MessageType {
  text
  image
  video
}
